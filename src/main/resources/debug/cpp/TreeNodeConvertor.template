string {{testcaseVName}} = "{{testcase}}";
// 去除字符串两端的空格
{{testcaseVName}} = trim({{testcaseVName}});

TreeNode* {{variableName}} = nullptr;
if ({{testcaseVName}} != "[]") {
    // 去掉字符串中的方括号
    {{testcaseVName}} = remove_char({{testcaseVName}}, '[');
    {{testcaseVName}} = remove_char({{testcaseVName}}, ']');

    // 将字符串按逗号分割
    vector<int> split;
    stringstream ss({{testcaseVName}});
    string item;
    while (getline(ss, item, ',')) {
        // 处理 "null" 的情况
        if (item == "null") {
            split.push_back(-1); // 用 -1 表示 null
        } else {
            split.push_back(stoi(item));
        }
    }

    // 创建二叉树
    if (!split.empty() && split[0] != -1) {
        {{variableName}} = new TreeNode(split[0]);
        queue<TreeNode*> q;
        q.push({{variableName}});
        int i = 1;

        while (!q.empty() && i < split.size()) {
            TreeNode* node = q.front();
            q.pop();

            // 添加左子节点
            if (i < split.size() && split[i] != -1) {
                node->left = new TreeNode(split[i]);
                q.push(node->left);
            }
            i++;

            // 添加右子节点
            if (i < split.size() && split[i] != -1) {
                node->right = new TreeNode(split[i]);
                q.push(node->right);
            }
            i++;
        }
    }
}
